#!/bin/sh
opendkim_home=/var/lib/opendkim
pidfile=/var/run/opendkim/opendkim.pid
keep_keys_count=5
create_keys_age_days=30
delete_keys_age_days=90

tmpdir=""
cleanup () {
    [ -n "$tmpdir" ] && [ -d "$tmpdir" ] && rm -rf "$tmpdir"
}
trap cleanup EXIT HUP INT QUIT TERM
tmpdir="$(mktemp -d)"

get_keys() {
    find "$opendkim_home/keys" -maxdepth 1 -type f -name "$1-$2-*.txt" | sed -nr "s|.*/$1-$2-(.*).txt|\1|p" | sort
}

count_keys() {
    get_keys "$1" "$2" | wc -w
}

key_age() {
    key_timestamp="$(date -d "$1" +%s)"
    today_timestamp="$(date +%s)"
    key_age_seconds="$((today_timestamp - key_timestamp))"
    key_age_days="$((key_age_seconds/86400))"
    echo "$key_age_days"
}

create_key() {
    today_date="$(date +%Y-%m-%d)"
    opendkim-genkey --directory="$tmpdir" \
                    --hash-algorithms=sha256 --bits=2048 \
                    --domain="$1" --append-domain --subdomains --restrict \
                    --selector="$2-$today_date"
    dnsname="$2-$today_date._domainkey.$1"
    data="$(<"$tmpdir/$2-$today_date.txt" tr '\n' ' ' | sed -r 's/\s+/ /g;s/.*\(\s*(.*)\).*/\1/')"
    cp "$opendkim_home/nsupdate.txt" "$tmpdir/nsupdate.txt"
    echo "nxrrset $dnsname in txt" >> "$tmpdir/nsupdate.txt"
    echo "add $dnsname 86400 in txt $data" >> "$tmpdir/nsupdate.txt"
    echo "send" >> "$tmpdir/nsupdate.txt"
    echo "yxrrset $dnsname in txt" >> "$tmpdir/nsupdate.txt"
    echo "send" >> "$tmpdir/nsupdate.txt"
    if nsupdate <"$tmpdir/nsupdate.txt"; then
        mv "$tmpdir/$2-$today_date.txt" "$opendkim_home/keys/$1-$2-$today_date.txt"
        chown opendkim:opendkim "$opendkim_home/keys/$1-$2-$today_date.txt"
        mv "$tmpdir/$2-$today_date.private" "$opendkim_home/keys/$1-$2-$today_date.private"
        chown opendkim:opendkim "$opendkim_home/keys/$1-$2-$today_date.private"
    fi
}

delete_key() {
    cp "$opendkim_home/nsupdate.txt" "$tmpdir/nsupdate.txt"
    dnsname="$2-$3._domainkey.$1"
    echo "del $dnsname in txt" >> "$tmpdir/nsupdate.txt"
    echo "send" >> "$tmpdir/nsupdate.txt"
    echo "nxrrset $dnsname in txt" >> "$tmpdir/nsupdate.txt"
    echo "send" >> "$tmpdir/nsupdate.txt"
    if nsupdate <"$tmpdir/nsupdate.txt"; then
        rm -f "$opendkim_home/keys/$1-$2-$3.txt"
        rm -f "$opendkim_home/keys/$1-$2-$3.private"
    fi
}

: > "$tmpdir/SigningTable"
: > "$tmpdir/KeyTable"

domains="$(cat "$opendkim_home/domains.txt" 2>/dev/null)"
prefix="$(cat "$opendkim_home/prefix.txt" 2>/dev/null)"

for domain in $domains; do
    key="$(get_keys "$domain" "$prefix" | tail -n1)"
    if [ -z "$key" ] || [ $(key_age "$key") -gt $create_keys_age_days ]; then
        create_key "$domain" "$prefix"
    fi
    while [ $(count_keys "$domain" "$prefix") -gt $keep_keys_count ]; do
       key="$(get_keys "$domain" "$prefix" | head -n1)"
       [ $(key_age $key) -lt $delete_keys_age_days ] && break
       delete_key "$domain" "$prefix" "$key"
    done
    key="$(get_keys "$domain" "$prefix" | tail -n2 | head -n1)"
    if [ -n "$key" ]; then
        echo "*@$domain $domain-$prefix-$key" >> "$tmpdir/SigningTable"
        echo "$domain-$prefix-$key $domain:$prefix-$key:$opendkim_home/keys/$domain-$prefix-$key.private" >> "$tmpdir/KeyTable"
    fi
done

mv "$tmpdir/KeyTable" "$opendkim_home/KeyTable"
mv "$tmpdir/SigningTable" "$opendkim_home/SigningTable"
[ -f "$pidfile" ] && kill -USR1 $(cat "$pidfile")
